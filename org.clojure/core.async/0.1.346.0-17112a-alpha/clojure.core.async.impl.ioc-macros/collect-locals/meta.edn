{:ns "clojure.core.async.impl.ioc-macros", :name "collect-locals", :file "clojure/core/async/impl/ioc_macros.clj", :type :fn, :src "(defn collect-locals [ast]\n  (let [collected-locals (->> ast\n                              ast/children\n                              (map ::collected-locals)\n                              (apply union #{}))\n        this-local (case (:op ast)\n                     :local ast\n                     nil)\n        collected-locals (case (:op ast)\n                           :let (difference collected-locals\n                                            (set (map :name (:bindings ast))))\n                           :loop (difference collected-locals\n                                             (set (map :name (:bindings ast))))\n                           collected-locals)]\n    (if-let [val (not-empty (if this-local\n                              (conj collected-locals this-local)\n                              collected-locals))]\n      (assoc ast ::collected-locals val)\n      ast)))", :column 1, :line 1028, :arglists ([ast])}