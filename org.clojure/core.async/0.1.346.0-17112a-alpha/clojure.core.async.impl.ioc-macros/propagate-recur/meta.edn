{:ns "clojure.core.async.impl.ioc-macros", :name "propagate-recur", :file "clojure/core/async/impl/ioc_macros.clj", :type :fn, :src "(defn propagate-recur [ast]\n  (cond\n   ;; If we are a loop and we need to transform, and\n   ;; one of our children is a recur, then we must transform everything\n   ;; that has a recur\n   (and (= (:op ast) :loop)\n        (::transform? ast)\n        (some ::has-recur? (ast/children ast)))\n   (ast/postwalk ast #(if (and (::has-recur? %)\n                               (not (= (:op %) :fn)))\n                        (assoc % ::transform? true)\n                        %))\n\n   (or (= (:op ast) :recur)\n          (some #(or (= (:op %) :recur)\n                     (::has-recur? %))\n                (ast/children ast)))\n   (assoc ast ::has-recur? true)\n\n   :else ast))", :column 1, :line 1007, :arglists ([ast])}