{:type :fn, :src "(defrecord RawCode [ast locals]\n  IInstruction\n  (reads-from [this]\n    (keep (or locals #{})\n          (map :name (::collected-locals ast))))\n  (writes-to [this] [(:id this)])\n  (block-references [this] [])\n  IEmittableInstruction\n  (emit-instruction [this state-sym]\n    (if (not-empty (reads-from this))\n      `[~@(->> (::collected-locals ast)\n               (map #(select-keys % [:op :name :form]))\n               (filter (fn [local]\n                         (when locals\n                           (get locals (:name local)))))\n               set\n               (mapcat\n                (fn [local]\n                  `[~(:form local) ~(get locals (:name local))]))) \n        ~(:id this) ~(:form ast)]\n      `[~(:id this) ~(:form ast)])))", :ns "clojure.core.async.impl.ioc-macros", :name "map->RawCode", :file "clojure/core/async/impl/ioc_macros.clj", :column 1, :line 238, :arglists ([m__6206__auto__]), :doc "Factory function for class clojure.core.async.impl.ioc_macros.RawCode, taking a map of keywords to field values."}