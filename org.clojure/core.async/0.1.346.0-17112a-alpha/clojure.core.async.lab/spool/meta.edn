{:ns "clojure.core.async.lab", :name "spool", :file "clojure/core/async/lab.clj", :type :fn, :src "(defn spool\n  \"Take a sequence and puts each value on a channel and returns the channel.\n   If no channel is provided, an unbuffered channel is created. If the\n   sequence ends, the channel is closed.\"\n  ([s c]\n     (async/go\n      (loop [[f & r] s]\n        (if f\n          (do\n            (async/>! c f)\n            (recur r))\n          (async/close! c))))\n     c)\n  ([s]\n     (spool s (async/chan))))", :column 1, :line 112, :arglists ([s c] [s]), :doc "Take a sequence and puts each value on a channel and returns the channel.\n   If no channel is provided, an unbuffered channel is created. If the\n   sequence ends, the channel is closed."}