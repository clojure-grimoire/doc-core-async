{:type :fn, :src "(deftype MultiplexingReadPort\n    [^Lock mutex ^Set read-ports]\n  impl/ReadPort\n  (take! [this handler]\n    (if (empty? read-ports)\n      (channels/box nil)\n      (do\n        (.lock mutex)\n        (let [^Lock handler handler\n              commit-handler (fn []\n                               (.lock handler)\n                               (let [take-cb (and (impl/active? handler) (impl/commit handler))]\n                                 (.unlock handler)\n                                 take-cb))\n              fret (fn [[val alt-port]]\n                     (if (nil? val)\n                       (do (.lock mutex)\n                           (.remove read-ports alt-port)\n                           (.unlock mutex)\n                           (impl/take! this handler))\n                       (when-let [take-cb (commit-handler)]\n                         (dispatch/run #(take-cb val)))))\n              current-ports (seq read-ports)]\n          (if-let [alt-res (async/do-alts fret current-ports {})]\n            (let [[val alt-port] @alt-res]\n              (if (nil? val)\n                (do (.remove read-ports alt-port)\n                    (.unlock mutex)\n                    (recur handler))\n                (do (.unlock mutex)\n                    (when-let [take-cb (commit-handler)]\n                      (dispatch/run #(take-cb val))))))\n            (do\n              (.unlock mutex)\n                nil)))))))", :ns "clojure.core.async.lab", :name "->MultiplexingReadPort", :file "clojure/core/async/lab.clj", :column 1, :line 33, :arglists ([mutex read-ports]), :doc "Positional factory function for class clojure.core.async.lab.MultiplexingReadPort."}