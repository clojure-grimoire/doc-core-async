{:ns "clojure.core.async", :name "pipe", :file "clojure/core/async.clj", :type :fn, :src "(defn pipe\n  \"Takes elements from the from channel and supplies them to the to\n  channel. By default, the to channel will be closed when the from\n  channel closes, but can be determined by the close?  parameter. Will\n  stop consuming the from channel if the to channel closes\"\n  ([from to] (pipe from to true))\n  ([from to close?]\n     (go-loop []\n      (let [v (<! from)]\n        (if (nil? v)\n          (when close? (close! to))\n          (when (>! to v)\n            (recur)))))\n     to))", :column 1, :line 426, :arglists ([from to] [from to close?]), :doc "Takes elements from the from channel and supplies them to the to\n  channel. By default, the to channel will be closed when the from\n  channel closes, but can be determined by the close?  parameter. Will\n  stop consuming the from channel if the to channel closes"}