{:ns "clojure.core.async", :name "chan", :file "clojure/core/async.clj", :type :fn, :src "(defn chan\n  \"Creates a channel with an optional buffer, an optional transducer\n  (like (map f), (filter p) etc or a composition thereof), and an\n  optional exception-handler.  If buf-or-n is a number, will create\n  and use a fixed buffer of that size. If a transducer is supplied a\n  buffer must be specified. ex-handler must be a fn of one argument -\n  if an exception occurs during transformation it will be called with\n  the Throwable as an argument, and any non-nil return value will be\n  placed in the channel.\"\n  ([] (chan nil))\n  ([buf-or-n] (chan buf-or-n nil))\n  ([buf-or-n xform] (chan buf-or-n xform nil))\n  ([buf-or-n xform ex-handler]\n     (when xform (assert buf-or-n \"buffer must be supplied when transducer is\"))\n     (channels/chan (if (number? buf-or-n) (buffer buf-or-n) buf-or-n) xform ex-handler)))", :column 1, :line 66, :arglists ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler]), :doc "Creates a channel with an optional buffer, an optional transducer\n  (like (map f), (filter p) etc or a composition thereof), and an\n  optional exception-handler.  If buf-or-n is a number, will create\n  and use a fixed buffer of that size. If a transducer is supplied a\n  buffer must be specified. ex-handler must be a fn of one argument -\n  if an exception occurs during transformation it will be called with\n  the Throwable as an argument, and any non-nil return value will be\n  placed in the channel."}