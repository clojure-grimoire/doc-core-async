{:ns "clojure.core.async", :name "take", :file "clojure/core/async.clj", :type :fn, :src "(defn take\n  \"Returns a channel that will return, at most, n items from ch. After n items\n   have been returned, or ch has been closed, the return channel will close.\n\n  The output channel is unbuffered by default, unless buf-or-n is given.\"\n  ([n ch]\n     (take n ch nil))\n  ([n ch buf-or-n]\n     (let [out (chan buf-or-n)]\n       (go (loop [x 0]\n             (when (< x n)\n               (let [v (<! ch)]\n                 (when (not (nil? v))\n                   (>! out v)\n                   (recur (inc x))))))\n           (close! out))\n       out)))", :column 1, :line 926, :arglists ([n ch] [n ch buf-or-n]), :doc "Returns a channel that will return, at most, n items from ch. After n items\n   have been returned, or ch has been closed, the return channel will close.\n\n  The output channel is unbuffered by default, unless buf-or-n is given."}