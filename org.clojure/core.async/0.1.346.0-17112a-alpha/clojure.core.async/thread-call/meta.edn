{:ns "clojure.core.async", :name "thread-call", :file "clojure/core/async.clj", :type :fn, :src "(defn thread-call\n  \"Executes f in another thread, returning immediately to the calling\n  thread. Returns a channel which will receive the result of calling\n  f when completed.\"\n  [f]\n  (let [c (chan 1)]\n    (let [binds (clojure.lang.Var/getThreadBindingFrame)]\n      (.execute thread-macro-executor\n                (fn []\n                  (clojure.lang.Var/resetThreadBindingFrame binds)\n                  (try\n                    (let [ret (f)]\n                      (when-not (nil? ret)\n                        (>!! c ret)))\n                    (finally\n                      (close! c))))))\n    c))", :column 1, :line 394, :arglists ([f]), :doc "Executes f in another thread, returning immediately to the calling\n  thread. Returns a channel which will receive the result of calling\n  f when completed."}