{:ns "clojure.core.async", :name "put!", :file "clojure/core/async.clj", :type :fn, :src "(defn put!\n  \"Asynchronously puts a val into port, calling fn1 (if supplied) when\n   complete, passing false iff port is already closed. nil values are\n   not allowed. If on-caller? (default true) is true, and the put is\n   immediately accepted, will call fn1 on calling thread.  Returns\n   true unless port is already closed.\"\n  ([port val]\n     (if-let [ret (impl/put! port val fhnop)]\n       @ret\n       true))\n  ([port val fn1] (put! port val fn1 true))\n  ([port val fn1 on-caller?]\n     (if-let [retb (impl/put! port val (fn-handler fn1))]\n       (let [ret @retb]\n         (if on-caller?\n           (fn1 ret)\n           (dispatch/run #(fn1 ret)))\n         ret)\n       true)))", :column 1, :line 138, :arglists ([port val] [port val fn1] [port val fn1 on-caller?]), :doc "Asynchronously puts a val into port, calling fn1 (if supplied) when\n   complete, passing false iff port is already closed. nil values are\n   not allowed. If on-caller? (default true) is true, and the put is\n   immediately accepted, will call fn1 on calling thread.  Returns\n   true unless port is already closed."}