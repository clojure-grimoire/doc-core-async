{:ns "clojure.core.async", :name "do-alts", :file "clojure/core/async.clj", :type :fn, :src "(defn do-alts\n  \"returns derefable [val port] if immediate, nil if enqueued\"\n  [fret ports opts]\n  (let [flag (alt-flag)\n        n (count ports)\n        ^ints idxs (random-array n)\n        priority (:priority opts)\n        ret\n        (loop [i 0]\n          (when (< i n)\n            (let [idx (if priority i (aget idxs i))\n                  port (nth ports idx)\n                  wport (when (vector? port) (port 0))\n                  vbox (if wport\n                         (let [val (port 1)]\n                           (impl/put! wport val (alt-handler flag #(fret [% wport]))))\n                         (impl/take! port (alt-handler flag #(fret [% port]))))]\n              (if vbox\n                (channels/box [@vbox (or wport port)])\n                (recur (inc i))))))]\n    (or\n     ret\n     (when (contains? opts :default)\n       (.lock ^Lock flag)\n       (let [got (and (impl/active? flag) (impl/commit flag))]\n         (.unlock ^Lock flag)\n         (when got\n           (channels/box [(:default opts) :default])))))))", :column 1, :line 215, :arglists ([fret ports opts]), :doc "returns derefable [val port] if immediate, nil if enqueued"}