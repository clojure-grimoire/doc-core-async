{:type :fn, :src "(defrecord Case [val-id test-vals jmp-blocks default-block]\n  IInstruction\n  (reads-from [this] [val-id])\n  (writes-to [this] [])\n  (block-references [this] [])\n  ITerminator\n  (terminate-block [this state-sym _]\n    `(do (case ~val-id\n           ~@(concat (mapcat (fn [test blk]\n                               `[~test (aset-all! ~state-sym\n                                                  ~STATE-IDX ~blk)])\n                             test-vals jmp-blocks)\n                     (when default-block\n                       `[(do (aset-all! ~state-sym ~STATE-IDX ~default-block)\n                             :recur)])))\n         :recur)))", :ns "cljs.core.async.impl.ioc-macros", :name "->Case", :file "cljs/core/async/impl/ioc_macros.clj", :column 1, :line 258, :arglists ([val-id test-vals jmp-blocks default-block]), :doc "Positional factory function for class cljs.core.async.impl.ioc_macros.Case."}