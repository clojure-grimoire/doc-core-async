{:type :fn, :src "(defrecord Recur [recur-nodes ids]\n  IInstruction\n  (reads-from [this] ids)\n  (writes-to [this] recur-nodes)\n  (block-references [this] [])\n  IEmittableInstruction\n  (emit-instruction [this state-sym]\n    (if-let [overlap (seq (intersection (set recur-nodes) (set ids)))]\n      (emit-clashing-binds recur-nodes ids overlap)\n      (mapcat (fn [r i]\n                `[~r ~i]) recur-nodes ids))))", :ns "cljs.core.async.impl.ioc-macros", :name "->Recur", :file "cljs/core/async/impl/ioc_macros.clj", :column 1, :line 237, :arglists ([recur-nodes ids]), :doc "Positional factory function for class cljs.core.async.impl.ioc_macros.Recur."}